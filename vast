#!/usr/bin/zsh

###     Argument Parsing
declare -a raw_paths
while (( "$#" )); do
  case "$1" in
    --filtering|-f)
      filtering="$2"
      shift 2
      ;;
    --filtering-preset|-fp)
      filtering_preset="$2"
      shift 2
      ;;
    --encode|-e)
      encode="$2"
      shift 2
      ;;
    --edit-scenedetect|-es) #handle these three somehow
      edit_scenedetect="$2"
      shift 2
      ;;
    --edit-filtering|-ef)
      edit_filtering="$2"
      shift 2
      ;;
    --edit-encode|-ee)
      edit_encode="$2"
      shift 2
      ;;
    --audio|-a)
      audio="$2"
      shift 2
      ;;
    --config|-c)
      config="$2"
      shift 2
      ;;
    --batch|-b)
      batch="$2"
      shift 2
      ;;
    --metrics|-m)
      metrics="$2"
      shift 2
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      raw_paths+=("$1")
      shift
      ;;
  esac
done

eval set -- "${raw_paths[@]}"

###     Paths/Prest extraction   - Rewrite for Bash compat maybe?
typeset -A config_variables=(
    temporary_folder "Default Temporary Folder"
    scenedetect_path "Default Scenedetect Script"
    interlaced_sd_path "Default Interlaced Scenedetect Script"
    batch_options "Batch Options"
    audio_option "Use Audio Default"
    filtering_option "Filtering Default"
    metric_option "Use Metrics Default"
    filtering_path "Default Filtering Script"
    encode_option "Default Encode Option"
)

if [[ -v audio ]]; typeset -A config_variables=( audio_option "$audio" ); fi
if [[ -v filtering ]]; typeset -A config_variables=( filtering_option "$filtering" ); fi
if [[ -v metrics ]]; typeset -A config_variables=( metric_option "$metrics" ); fi
if [[ -v filtering_preset ]]; typeset -A config_variables=( filtering_path "$filtering_preset" ); fi
if [[ -v encode ]]; typeset -A config_variables=( encode_option "$encode" ); fi

awk_parse_config='
$0 == sds {found=1; next}
found && /^$/ {exit}
found {print}
'

for key ("${(@k)config_variables}"); do
  if [ grep -q "###     $config_variables[$key]" ".vast.conf" ];then
    inbetween=$(awk -v sds="###     $config_variables[$key]" "$awk_parse_config" vast.conf)
    eval $key="$inbetween"
  fi
done;

if [[ -z temporary_folder ]];   print_and_exit "Error: Temporary Folder not found in Config"; fi
if [[ -z scenedetect_path ]]; print_and_exit "Error: Scenedetect preset '$config_variables[scenedetect_path]' not found in config."; fi
if [[ -z interlaced_sd_path ]]; print_and_exit "Error: Scenedetect preset '$config_variables[interlaced_sd_path]' not found in config."; fi
if [[ -z batch_options ]];   print_and_exit "Error: Batch Options not found in Config"; fi
if [[ -z audio_option ]]; print_and_exit "Error: Audio option '$config_variables[audio_option]' not found in config."; fi
if [[ -z filtering_option ]]; print_and_exit "Error: Scenedetect option '$config_variables[filtering_option]' not found in config."; fi
if [[ -z metric_option ]]; print_and_exit "Error: Metrics option '$config_variables[metric_option]' not found in config."; fi
if [[ -z filtering_path ]];   print_and_exit "Error: Filter preset '$config_variables[filtering_path]' not found in config."; fi
if [[ -z encode_option ]]; print_and_exit "Error: Encode option '$config_variables[encode_option]' not found in config."; fi

###     File Handling
declare -a video_files
for arg in "$@"; do
    if [[ -d "$arg" ]]; then
        while IFS= read -r -d '' file; do
            video_files+=("$file")
        done < <(find "$arg" -type f \( -name "*.mkv" -o -name "*.mp4" -o -name "*.webm" -o -name "*.avi" -o -name "*.mov" -o -name "*.mpg" -o -name "*.mpeg" -o -name "*.mts" -o -name "*.m2ts" -o -name "*.mxf" -o -name "*.wmv" \) -print0)
    elif [[ -f "$arg" ]]; then
        video_files+=("$arg")
    fi
done

for video_path in "${video_files[@]}"; do
working_directory="${video_path%/*}"
filename="${video_path##*/}"
extension="${filename##*.}"
noextension="${filename%.*}"
tempname="${noextension}.mkv"
batch_counter=1

#       Redo, non-functional atm
###     Skip if already encoded
if [[ "$filename" == *-encoded.* ]]; then
    echo "Skipping already encoded file: $filename"
    continue
fi
if [ -f "$working_directory/$noextension-encoded.mkv" ] || [ -f "$working_directory/$noextension-encoded.mp4" ]; then
    echo "Encoded file already exists for: $filename"
    continue
fi

###     Determine interlacing
interlacing=$(ffprobe -v quiet -select_streams v -show_entries stream=field_order -of csv=p=0 "$video_path")

if [[ "$interlacing" != "progressive" && "$interlacing" != "tb" ]]; then
    echo "* Unknown interlacing type encountered: $filename"
    echo "* Interlacing type: $interlacing"
    continue
fi

###     Create Temporary Working Folder
mkdir $temp

function batch_conditional {

if [[ $filtering_option == "2" ]]; then
###     Replace source in scenedetect .vpy
export VAST_VIDEO_PATH=$(realpath "$video_path")

#       Possible alternative to Av1an?
###     Create scenes file for scenedetect skipping
    if [[ "$interlacing" == "tb" ]]; then
        av1an -i $interlaced_sd_path -e vpx \
            -a " -an " -w 16 \
            -f " -sn -dn " \
            --sc-downscale-height 720 \
            --sc-only -s $temp/scenes-$filename.txt \
            -o "lol.mkv"
    else
        av1an -i $scenedetect_path -e vpx \
            -a " -an " -w 16 \
            -f " -sn -dn " \
            --sc-downscale-height 720 \
            --sc-only -s $temp/scenes-$filename.txt \
            -o "lol.mkv"
    fi

unset VAST_VIDEO_PATH
fi

###     Replace source in filtering .vpy
export VAST_VIDEO_PATH=$(realpath "$video_path")

###     Create unique filenames
increment="${noextension}-${batch_counter}.${extension}" ### Replace Extension

###     Handle Scenedetect/Filtering switching
with_sds_filtering=$(cat <<'EOF'
    -s "$temp"scenes-$filename.txt \
    -i "$filtering_path" \
    -o "$temp$increment"
EOF
)

with_filtering=$(cat <<'EOF'
    -i "$filtering_path" \
    -o "$temp$increment"
EOF
)

without_sds_filtering=$(cat <<'EOF'
    -i "$video_path" \
    -o "$temp$increment"
EOF
)

###     Get Encoder Preset
if [[ $filtering_option == "2" ]]; then
    eval "$encode_option$with_sds_filtering"
elif [[ $filtering_option == "1" ]]; then
    eval "$encode_option$with_filtering"
elif [[ $filtering_option == "0" ]]; then
    eval "$encode_option$without_sds_filtering"
else
    echo "Error: Unsupported scenedetect flag"
    exit 1
fi

unset VAST_VIDEO_PATH

###     Run FFVship to create Metric JSONs and Graphs
if [[ $metric_option == "1" ]]; then
FFVship -s "$temp/$noextension-filtered.mkv" -e "$temp/$noextension-encoded.mkv" -m Butteraugli --json "$temp/$noextension-butter.json"
python plot_butter.py "$temp/$noextension-butter.json" "$working_directory/$noextension-butter.png"
FFVship -s "$temp/$noextension-filtered.mkv" -e "$temp/$noextension-encoded.mkv" --json "$temp/$noextension-ssimu2.json"
python plot_ssimu2.py "$temp/$noextension-ssimu2.json" "$working_directory/$noextension-ssimu2.png"
elif [[ $metric_option == "0" ]]; then
    true
else
    echo "Error: Unsupported metric flag"
    exit 1
fi

###     Mux audio from source video with encoded video
if [[ $audio_option == "1" ]]; then
ffmpeg -an -i "$temp$increment" -vn -i "$video_path" \
    -c:v copy -c:a copy \
    "$working_directory/$increment"
elif [[ $audio_option == "0" ]]; then
    true
else
    echo "Error: Unsupported audio flag"
    exit 1
fi

    let batch_counter=batch_counter+1
}

###     Batch Encoding
if [[ -n $batch == "1" ]]; then
    for parameters in ${batch_options[@]}; do
        batch_conditional
    done
else
    batch_conditional
fi

###     Remove temporary folder
rm -rf $temp

done
